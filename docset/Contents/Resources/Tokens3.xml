<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GCDAsyncSocket.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GCDAsyncSocket</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/init</TokenIdentifier>
			<Abstract type="html">GCDAsyncSocket uses the standard delegate paradigm,
but executes all delegate callbacks on a given delegate dispatch queue.
This allows for maximum concurrency, while at the same time providing easy thread safety.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GCDAsyncSocket/socketFromConnectedSocketFD:socketQueue:error:</TokenIdentifier>
			<Abstract type="html">Create GCDAsyncSocket from already connect BSD socket file descriptor</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)socketFromConnectedSocketFD:(int)socketFD socketQueue:(nullable dispatch_queue_t)sq error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/socketFromConnectedSocketFD:socketQueue:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/synchronouslySetDelegate:</TokenIdentifier>
			<Abstract type="html">If you are setting the delegate to nil within the delegate&apos;s dealloc method,
you may need to use the synchronous versions below.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)synchronouslySetDelegate:(id&lt;GCDAsyncSocketDelegate&gt;)delegate</Declaration>
			
			
			<Anchor>//api/name/synchronouslySetDelegate:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/alternateAddressDelay</TokenIdentifier>
			<Abstract type="html">When connecting to both IPv4 and IPv6 using Happy Eyeballs (RFC 6555) https://tools.ietf.org/html/rfc6555
this is the delay between connecting to the preferred protocol and the fallback protocol.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)alternateAddressDelay</Declaration>
			
			
			<Anchor>//api/name/alternateAddressDelay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/userData</TokenIdentifier>
			<Abstract type="html">User data allows you to associate arbitrary information with the socket.
This data is not used internally by socket in any way.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (id)userData</Declaration>
			
			
			<Anchor>//api/name/userData</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/acceptOnInterface:port:error:</TokenIdentifier>
			<Abstract type="html">This method is the same as acceptOnPort:error: with the
additional option of specifying which interface to listen on.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)acceptOnInterface:(NSString *)interface port:(uint16_t)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/acceptOnInterface:port:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/acceptOnUrl:error:</TokenIdentifier>
			<Abstract type="html">Tells the socket to begin listening and accepting connections on the unix domain at the given url.
When a connection is accepted, a new instance of GCDAsyncSocket will be spawned to handle it,
and the socket:didAcceptNewSocket: delegate method will be invoked.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)acceptOnUrl:(NSURL *)url error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/acceptOnUrl:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/preConnectWithInterface:error:</TokenIdentifier>
			<Abstract type="html">This method runs through the various checks required prior to a connection attempt.
It is shared between the connectToHost and connectToAddress methods.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (BOOL)preConnectWithInterface:(NSString *)interface error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/preConnectWithInterface:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToHost:onPort:error:</TokenIdentifier>
			<Abstract type="html">Connects to the given host and port.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToHost:(NSString *)host onPort:(uint16_t)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToHost:onPort:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToHost:onPort:withTimeout:error:</TokenIdentifier>
			<Abstract type="html">Connects to the given host and port with an optional timeout.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToHost:(NSString *)host onPort:(uint16_t)port withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToHost:onPort:withTimeout:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToHost:onPort:viaInterface:withTimeout:error:</TokenIdentifier>
			<Abstract type="html">Connects to the given host &amp;amp; port, via the optional interface, with an optional timeout.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToHost:(NSString *)host onPort:(uint16_t)port viaInterface:(NSString *)interface withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToHost:onPort:viaInterface:withTimeout:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToAddress:error:</TokenIdentifier>
			<Abstract type="html">Connects to the given address, specified as a sockaddr structure wrapped in a NSData object.
For example, a NSData object returned from NSNetService&apos;s addresses method.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToAddress:(NSData *)remoteAddr error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToAddress:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToAddress:withTimeout:error:</TokenIdentifier>
			<Abstract type="html">This method is the same as connectToAddress:error: with an additional timeout option.
To not time out use a negative time interval, or simply use the connectToAddress:error: method.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToAddress:(NSData *)remoteAddr withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToAddress:withTimeout:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToAddress:viaInterface:withTimeout:error:</TokenIdentifier>
			<Abstract type="html">Connects to the given address, using the specified interface and timeout.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToAddress:(NSData *)remoteAddr viaInterface:(NSString *)interface withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToAddress:viaInterface:withTimeout:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToUrl:withTimeout:error:</TokenIdentifier>
			<Abstract type="html">Connects to the unix domain socket at the given url, using the specified timeout.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToUrl:(NSURL *)url withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToUrl:withTimeout:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectToNetService:error:</TokenIdentifier>
			<Abstract type="html">Iterates over the given NetService&apos;s addresses in order, and invokes connectToAddress:error:. Stops at the
first invocation that succeeds and returns YES; otherwise returns NO.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectToNetService:(NSNetService *)netService error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToNetService:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/lookup:didFail:</TokenIdentifier>
			<Abstract type="html">This method is called if the DNS lookup fails.
This method is executed on the socketQueue.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (void)lookup:(int)aStateIndex didFail:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/lookup:didFail:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/disconnect</TokenIdentifier>
			<Abstract type="html">Disconnects immediately (synchronously). Any pending reads or writes are dropped.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)disconnect</Declaration>
			
			
			<Anchor>//api/name/disconnect</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/disconnectAfterReading</TokenIdentifier>
			<Abstract type="html">Disconnects after all pending reads have completed.
After calling this, the read and write methods will do nothing.
The socket will disconnect even if there are still pending writes.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)disconnectAfterReading</Declaration>
			
			
			<Anchor>//api/name/disconnectAfterReading</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/disconnectAfterWriting</TokenIdentifier>
			<Abstract type="html">Disconnects after all pending writes have completed.
After calling this, the read and write methods will do nothing.
The socket will disconnect even if there are still pending reads.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)disconnectAfterWriting</Declaration>
			
			
			<Anchor>//api/name/disconnectAfterWriting</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/disconnectAfterReadingAndWriting</TokenIdentifier>
			<Abstract type="html">Disconnects after all pending reads and writes have completed.
After calling this, the read and write methods will do nothing.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)disconnectAfterReadingAndWriting</Declaration>
			
			
			<Anchor>//api/name/disconnectAfterReadingAndWriting</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/maybeClose</TokenIdentifier>
			<Abstract type="html">Closes the socket if possible.
That is, if all writes have completed, and we&apos;re set to disconnect after writing,
or if all reads have completed, and we&apos;re set to disconnect after reading.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (void)maybeClose</Declaration>
			
			
			<Anchor>//api/name/maybeClose</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readMaxedOutError</TokenIdentifier>
			<Abstract type="html">Returns a standard AsyncSocket maxed out error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (NSError *)readMaxedOutError</Declaration>
			
			
			<Anchor>//api/name/readMaxedOutError</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readTimeoutError</TokenIdentifier>
			<Abstract type="html">Returns a standard AsyncSocket write timeout error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (NSError *)readTimeoutError</Declaration>
			
			
			<Anchor>//api/name/readTimeoutError</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/writeTimeoutError</TokenIdentifier>
			<Abstract type="html">Returns a standard AsyncSocket write timeout error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (NSError *)writeTimeoutError</Declaration>
			
			
			<Anchor>//api/name/writeTimeoutError</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectedHost</TokenIdentifier>
			<Abstract type="html">Returns the local or remote host and port to which this socket is connected, or nil and 0 if not connected.
The host will be an IP address.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (NSString *)connectedHost</Declaration>
			
			
			<Anchor>//api/name/connectedHost</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/connectedAddress</TokenIdentifier>
			<Abstract type="html">Returns the local or remote address to which this socket is connected,
specified as a sockaddr structure wrapped in a NSData object.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (NSData *)connectedAddress</Declaration>
			
			
			<Anchor>//api/name/connectedAddress</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/isIPv4</TokenIdentifier>
			<Abstract type="html">Returns whether the socket is IPv4 or IPv6.
An accepting socket may be both.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)isIPv4</Declaration>
			
			
			<Anchor>//api/name/isIPv4</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/isSecure</TokenIdentifier>
			<Abstract type="html">Returns whether or not the socket has been secured via SSL/TLS.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)isSecure</Declaration>
			
			
			<Anchor>//api/name/isSecure</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/getInterfaceAddress4:address6:fromDescription:port:</TokenIdentifier>
			<Abstract type="html">Finds the address of an interface description.
An inteface description may be an interface name (en0, en1, lo0) or corresponding IP (192.168.4.34).</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (void)getInterfaceAddress4:(NSMutableData **)interfaceAddr4Ptr address6:(NSMutableData **)interfaceAddr6Ptr fromDescription:(NSString *)interfaceDescription port:(uint16_t)port</Declaration>
			
			
			<Anchor>//api/name/getInterfaceAddress4:address6:fromDescription:port:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataWithTimeout:buffer:bufferOffset:tag:</TokenIdentifier>
			<Abstract type="html">Reads the first available bytes that become available on the socket.
The bytes will be appended to the given byte buffer starting at the given offset.
The given buffer will automatically be increased in size if needed.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataWithTimeout:(NSTimeInterval)timeout buffer:(NSMutableData *)buffer bufferOffset:(NSUInteger)offset tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataWithTimeout:buffer:bufferOffset:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataWithTimeout:buffer:bufferOffset:maxLength:tag:</TokenIdentifier>
			<Abstract type="html">Reads the first available bytes that become available on the socket.
The bytes will be appended to the given byte buffer starting at the given offset.
The given buffer will automatically be increased in size if needed.
A maximum of length bytes will be read.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataWithTimeout:(NSTimeInterval)timeout buffer:(NSMutableData *)buffer bufferOffset:(NSUInteger)offset maxLength:(NSUInteger)length tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataWithTimeout:buffer:bufferOffset:maxLength:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToLength:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Reads the given number of bytes.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToLength:(NSUInteger)length withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToLength:withTimeout:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToLength:withTimeout:buffer:bufferOffset:tag:</TokenIdentifier>
			<Abstract type="html">Reads the given number of bytes.
The bytes will be appended to the given byte buffer starting at the given offset.
The given buffer will automatically be increased in size if needed.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToLength:(NSUInteger)length withTimeout:(NSTimeInterval)timeout buffer:(NSMutableData *)buffer bufferOffset:(NSUInteger)offset tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToLength:withTimeout:buffer:bufferOffset:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToData:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Reads bytes until (and including) the passed &quot;data&quot; parameter, which acts as a separator.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToData:withTimeout:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToData:withTimeout:buffer:bufferOffset:tag:</TokenIdentifier>
			<Abstract type="html">Reads bytes until (and including) the passed &quot;data&quot; parameter, which acts as a separator.
The bytes will be appended to the given byte buffer starting at the given offset.
The given buffer will automatically be increased in size if needed.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout buffer:(NSMutableData *)buffer bufferOffset:(NSUInteger)offset tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToData:withTimeout:buffer:bufferOffset:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToData:withTimeout:maxLength:tag:</TokenIdentifier>
			<Abstract type="html">Reads bytes until (and including) the passed &quot;data&quot; parameter, which acts as a separator.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout maxLength:(NSUInteger)length tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToData:withTimeout:maxLength:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readDataToData:withTimeout:buffer:bufferOffset:maxLength:tag:</TokenIdentifier>
			<Abstract type="html">Reads bytes until (and including) the passed &quot;data&quot; parameter, which acts as a separator.
The bytes will be appended to the given byte buffer starting at the given offset.
The given buffer will automatically be increased in size if needed.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout buffer:(NSMutableData *)buffer bufferOffset:(NSUInteger)offset maxLength:(NSUInteger)length tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/readDataToData:withTimeout:buffer:bufferOffset:maxLength:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/progressOfReadReturningTag:bytesDone:total:</TokenIdentifier>
			<Abstract type="html">Returns progress of the current read, from 0.0 to 1.0, or NaN if no current read (use isnan() to check).
The parameters &quot;tag&quot;, &quot;done&quot; and &quot;total&quot; will be filled in if they aren&apos;t NULL.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (float)progressOfReadReturningTag:(long *)tagPtr bytesDone:(NSUInteger *)donePtr total:(NSUInteger *)totalPtr</Declaration>
			
			
			<Anchor>//api/name/progressOfReadReturningTag:bytesDone:total:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/maybeDequeueRead</TokenIdentifier>
			<Abstract type="html">This method starts a new read, if needed.</Abstract>
			<DeclaredIn>GCDAsyncSocket.m</DeclaredIn>
			
			<Declaration>- (void)maybeDequeueRead</Declaration>
			
			
			<Anchor>//api/name/maybeDequeueRead</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/setIPv4Enabled:</TokenIdentifier>
			<Abstract type="html">By default, both IPv4 and IPv6 are enabled.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite, getter=isIPv4Enabled) BOOL IPv4Enabled</Declaration>
			
			
			<Anchor>//api/name/IPv4Enabled</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/isIPv4Enabled</TokenIdentifier>
			<Abstract type="html">By default, both IPv4 and IPv6 are enabled.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite, getter=isIPv4Enabled) BOOL IPv4Enabled</Declaration>
			
			
			<Anchor>//api/name/IPv4Enabled</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCDAsyncSocket/IPv4Enabled</TokenIdentifier>
			<Abstract type="html">By default, both IPv4 and IPv6 are enabled.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite, getter=isIPv4Enabled) BOOL IPv4Enabled</Declaration>
			
			
			<Anchor>//api/name/IPv4Enabled</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/writeData:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Writes data to the socket, and calls the delegate when finished.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)writeData:(nullable NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/writeData:withTimeout:tag:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/progressOfWriteReturningTag:bytesDone:total:</TokenIdentifier>
			<Abstract type="html">Returns progress of the current write, from 0.0 to 1.0, or NaN if no current write (use isnan() to check).
The parameters &quot;tag&quot;, &quot;done&quot; and &quot;total&quot; will be filled in if they aren&apos;t NULL.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (float)progressOfWriteReturningTag:(nullable long *)tagPtr bytesDone:(nullable NSUInteger *)donePtr total:(nullable NSUInteger *)totalPtr</Declaration>
			
			
			<Anchor>//api/name/progressOfWriteReturningTag:bytesDone:total:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/startTLS:</TokenIdentifier>
			<Abstract type="html">Secures the connection using SSL/TLS.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)startTLS:(nullable NSDictionary&lt;NSString*,NSObject*&gt; *)tlsSettings</Declaration>
			
			
			<Anchor>//api/name/startTLS:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/setAutoDisconnectOnClosedReadStream:</TokenIdentifier>
			<Abstract type="html">Traditionally sockets are not closed until the conversation is over.
However, it is technically possible for the remote enpoint to close its write stream.
Our socket would then be notified that there is no more data to be read,
but our socket would still be writeable and the remote endpoint could continue to receive our data.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite) BOOL autoDisconnectOnClosedReadStream</Declaration>
			
			
			<Anchor>//api/name/autoDisconnectOnClosedReadStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/autoDisconnectOnClosedReadStream</TokenIdentifier>
			<Abstract type="html">Traditionally sockets are not closed until the conversation is over.
However, it is technically possible for the remote enpoint to close its write stream.
Our socket would then be notified that there is no more data to be read,
but our socket would still be writeable and the remote endpoint could continue to receive our data.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite) BOOL autoDisconnectOnClosedReadStream</Declaration>
			
			
			<Anchor>//api/name/autoDisconnectOnClosedReadStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCDAsyncSocket/autoDisconnectOnClosedReadStream</TokenIdentifier>
			<Abstract type="html">Traditionally sockets are not closed until the conversation is over.
However, it is technically possible for the remote enpoint to close its write stream.
Our socket would then be notified that there is no more data to be read,
but our socket would still be writeable and the remote endpoint could continue to receive our data.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readwrite) BOOL autoDisconnectOnClosedReadStream</Declaration>
			
			
			<Anchor>//api/name/autoDisconnectOnClosedReadStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/markSocketQueueTargetQueue:</TokenIdentifier>
			<Abstract type="html">GCDAsyncSocket maintains thread safety by using an internal serial dispatch_queue.
In most cases, the instance creates this queue itself.
However, to allow for maximum flexibility, the internal queue may be passed in the init method.
This allows for some advanced options such as controlling socket priority via target queues.
However, when one begins to use target queues like this, they open the door to some specific deadlock issues.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)markSocketQueueTargetQueue:(dispatch_queue_t)socketQueuesPreConfiguredTargetQueue</Declaration>
			
			
			<Anchor>//api/name/markSocketQueueTargetQueue:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/performBlock:</TokenIdentifier>
			<Abstract type="html">It&apos;s not thread-safe to access certain variables from outside the socket&apos;s internal queue.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (void)performBlock:(dispatch_block_t)block</Declaration>
			
			
			<Anchor>//api/name/performBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/socketFD</TokenIdentifier>
			<Abstract type="html">These methods are only available from within the context of a performBlock: invocation.
See the documentation for the performBlock: method above.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (int)socketFD</Declaration>
			
			
			<Anchor>//api/name/socketFD</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/readStream</TokenIdentifier>
			<Abstract type="html">These methods are only available from within the context of a performBlock: invocation.
See the documentation for the performBlock: method above.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (nullable CFReadStreamRef)readStream</Declaration>
			
			
			<Anchor>//api/name/readStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/enableBackgroundingOnSocket</TokenIdentifier>
			<Abstract type="html">This method is only available from within the context of a performBlock: invocation.
See the documentation for the performBlock: method above.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (BOOL)enableBackgroundingOnSocket</Declaration>
			
			
			<Anchor>//api/name/enableBackgroundingOnSocket</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCDAsyncSocket/sslContext</TokenIdentifier>
			<Abstract type="html">This method is only available from within the context of a performBlock: invocation.
See the documentation for the performBlock: method above.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>- (nullable SSLContextRef)sslContext</Declaration>
			
			
			<Anchor>//api/name/sslContext</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GCDAsyncSocket/lookupHost:port:error:</TokenIdentifier>
			<Abstract type="html">The address lookup utility used by the class.
This method is synchronous, so it&apos;s recommended you use it on a background thread/queue.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>+ (nullable NSMutableArray *)lookupHost:(NSString *)host port:(uint16_t)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/lookupHost:port:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GCDAsyncSocket/hostFromAddress:</TokenIdentifier>
			<Abstract type="html">Extracting host and port information from raw address data.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)hostFromAddress:(NSData *)address</Declaration>
			
			
			<Anchor>//api/name/hostFromAddress:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GCDAsyncSocket/CRLFData</TokenIdentifier>
			<Abstract type="html">A few common line separators, for use with the readDataToData:... methods.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<Declaration>+ (NSData *)CRLFData</Declaration>
			
			
			<Anchor>//api/name/CRLFData</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>