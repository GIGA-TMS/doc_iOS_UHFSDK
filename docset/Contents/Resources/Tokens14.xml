<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/UHFDevice.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/UHFDevice</TokenIdentifier>
			<Abstract type="html">UHFDevice communicate with remote UHF device.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
            
			
			<NodeRef refid="14"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/setListener:</TokenIdentifier>
			<Abstract type="html">Set ts800 reply listener</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)setListener:(id&lt;IUHFDeviceListener&gt;)listener</Declaration>
			<Parameters>
				<Parameter>
					<Name>listener</Name>
					<Abstract type="html">see IUHFDeviceListener</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setListener:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/Connect</TokenIdentifier>
			<Abstract type="html">Connect to remote device.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)Connect</Declaration>
			
			
			<Anchor>//api/name/Connect</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/sendGNetCMD:</TokenIdentifier>
			<Abstract type="html">send  Special CMD</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)sendGNetCMD:(NSData *)cmdData</Declaration>
			<Parameters>
				<Parameter>
					<Name>cmdData</Name>
					<Abstract type="html">Special CMD format</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendGNetCMD:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/setUhfListener:</TokenIdentifier>
			<Abstract type="html">UHF Device callback</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, nullable) id&lt;IUHFDeviceListener&gt; uhfListener</Declaration>
			
			
			<Anchor>//api/name/uhfListener</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/uhfListener</TokenIdentifier>
			<Abstract type="html">UHF Device callback</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, nullable) id&lt;IUHFDeviceListener&gt; uhfListener</Declaration>
			
			
			<Anchor>//api/name/uhfListener</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UHFDevice/uhfListener</TokenIdentifier>
			<Abstract type="html">UHF Device callback</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, nullable) id&lt;IUHFDeviceListener&gt; uhfListener</Declaration>
			
			
			<Anchor>//api/name/uhfListener</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/getSDKVersion</TokenIdentifier>
			<Abstract type="html">Gets the version of SDK library</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (NSString *)getSDKVersion</Declaration>
			
			<ReturnValue><Abstract type="html">Version</Abstract></ReturnValue>
			<Anchor>//api/name/getSDKVersion</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdMarkMultiCMD:CMDCode:CMDCount:</TokenIdentifier>
			<Abstract type="html">send  Special Multi CMD</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdMarkMultiCMD:(NSMutableArray *)datas CMDCode:(Byte)apiCode CMDCount:(int)cmdCount</Declaration>
			<Parameters>
				<Parameter>
					<Name>datas</Name>
					<Abstract type="html">Special CMD format</Abstract>
				</Parameter><Parameter>
					<Name>apiCode</Name>
					<Abstract type="html">software api code</Abstract>
				</Parameter><Parameter>
					<Name>cmdCount</Name>
					<Abstract type="html">cmd conunt</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdMarkMultiCMD:CMDCode:CMDCount:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdInitializeSettings:</TokenIdentifier>
			<Abstract type="html">Initialize Settings
Initializes the device settings.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdInitializeSettings:(ClassVer)classVer</Declaration>
			
			
			<Anchor>//api/name/cmdInitializeSettings:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdControlBuzzer:</TokenIdentifier>
			<Abstract type="html">Only for TS100
Control reader to make a specified sound beep.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdControlBuzzer:(BuzzerAction)buzzerAct</Declaration>
			<Parameters>
				<Parameter>
					<Name>buzzerCtrl</Name>
					<Abstract type="html">buzzerMode</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdControlBuzzer:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetRepeatTime:Time:</TokenIdentifier>
			<Abstract type="html">SetRepeatTime</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetRepeatTime:(BOOL)isTemp Time:(Byte)time</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter><Parameter>
					<Name>time</Name>
					<Abstract type="html">Unit: 0.1 seconds
0: Immediately
1~253: 0.1~25.3 seconds
*254: Never repeat</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetRepeatTime:Time:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetRepeatTime:</TokenIdentifier>
			<Abstract type="html">cmdGetRepeatTime</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetRepeatTime:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetRepeatTime:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetScanMode:ScanMode:</TokenIdentifier>
			<Abstract type="html">Only for TS800 &amp;amp; UR0250
Set Scan Mode</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetScanMode:(BOOL)isTemp ScanMode:(ScanMode)scanMode</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter><Parameter>
					<Name>scanMode</Name>
					<Abstract type="html">Scan Mode</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetScanMode:ScanMode:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetTriggerType:</TokenIdentifier>
			<Abstract type="html">Only for TS800 &amp;amp; UR0250
Get Trigger Source</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetTriggerType:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetTriggerType:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetTriggerType:TriggerType:</TokenIdentifier>
			<Abstract type="html">Only for TS800 &amp;amp; UR0250
Set Trigger Sourec</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetTriggerType:(BOOL)isTemp TriggerType:(TriggerType)triggerType</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter><Parameter>
					<Name>triggerType</Name>
					<Abstract type="html">The trigger source of inventory.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetTriggerType:TriggerType:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetQValue:</TokenIdentifier>
			<Abstract type="html">Get Q Value
Gets the starting Q value for the number of slots in the round.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetQValue:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetQValue:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetQValue:QValue:</TokenIdentifier>
			<Abstract type="html">Set Q Value
Sets the starting Q value for the number of slots in the round.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetQValue:(BOOL)isTemp QValue:(Byte)qvalue</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter><Parameter>
					<Name>qvalue</Name>
					<Abstract type="html">The starting Q value for the number of slots in the round. The value ranges from 0 to 15.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetQValue:QValue:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetSessionAndTarget:</TokenIdentifier>
			<Abstract type="html">Get Session &amp;amp; Target
Gets the session flag used for inventory round.
Gets the target for inventory round.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetSessionAndTarget:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetSessionAndTarget:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetSessionAndTarget:Target:Session:</TokenIdentifier>
			<Abstract type="html">Set Session &amp;amp; Target
Sets the target for inventory round.
Sets the session flag used for inventory round.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetSessionAndTarget:(BOOL)isTemp Target:(Target)target Session:(Session)session</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">Target indicates whether the Select modifies a Tag’s SL flag or its inventoried flag</Abstract>
				</Parameter><Parameter>
					<Name>session</Name>
					<Abstract type="html">The session flag to be selected for an inventory round</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetSessionAndTarget:Target:Session:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetRfPower:</TokenIdentifier>
			<Abstract type="html">Get Rf Power
Gets the RF Power strength.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetRfPower:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetRfPower:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetRfPower:RFPower:</TokenIdentifier>
			<Abstract type="html">Sets the RF Power strength.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetRfPower:(BOOL)isTemp RFPower:(Byte)rfPower</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter><Parameter>
					<Name>rfPower</Name>
					<Abstract type="html">Specifies the RF Power strength. The value is ranging from 1 to 27. The default value is 11. (Range:1~27)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetRfPower:RFPower:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetSensitivity:</TokenIdentifier>
			<Abstract type="html">Get the RX RF input sensitivity level.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetSensitivity:(BOOL)isTemp</Declaration>
			
			
			<Anchor>//api/name/cmdGetSensitivity:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetSensitivity:RfSensitivityLevel:</TokenIdentifier>
			<Abstract type="html">Define the RX RF input sensitivity level.
&lt;p&gt;
RX Sensitivity setting defines the RX input sensitivity level.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetSensitivity:(BOOL)isTemp RfSensitivityLevel:(RfSensitivityLevel)sensitivity</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">Write the sensitivity value to RAM or not. It the value is true, the sensitivity value will be write.</Abstract>
				</Parameter><Parameter>
					<Name>sensitivity</Name>
					<Abstract type="html">Specifies the RF input sensitivity level.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetSensitivity:RfSensitivityLevel:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetFrequencyList:</TokenIdentifier>
			<Abstract type="html">Get Frequency List
Gets the channel of hopping frequency in MHz.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetFrequencyList:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetFrequencyList:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetFrequencyList:List:</TokenIdentifier>
			<Abstract type="html">Set Frequency List
Sets the channel of hopping frequency in MHz.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetFrequencyList:(BOOL)isTemp List:(NSArray *)frequencyList</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">If the value is true, this setting will write into EEPROM.</Abstract>
				</Parameter><Parameter>
					<Name>frequencyList</Name>
					<Abstract type="html">Specifies the channel of hopping frequency for reading tag data.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetFrequencyList:List:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetTagPresentRepeatInterval:Time:</TokenIdentifier>
			<Abstract type="html">Set the threshold to raise a TagPresentedEvent(UHFCallback.didDiscoveredTag).</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetTagPresentRepeatInterval:(BOOL)isTemp Time:(int)time</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter><Parameter>
					<Name>time</Name>
					<Abstract type="html">The period to raising a TagPresentedEvent. range: 1~255 (Unit: 100ms), 0:Always repeating raising event, 255: Never repeating raising event.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetTagPresentRepeatInterval:Time:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetTagPresentRepeatInterval:</TokenIdentifier>
			<Abstract type="html">Get the threshold to raise a TagRemovedEvent(UHFCallback.didDiscoveredTag).</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetTagPresentRepeatInterval:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetTagPresentRepeatInterval:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSetTagRemoveThreshold:Round:</TokenIdentifier>
			<Abstract type="html">Set the threshold to raise a TagRemovedEvent(UHFCallback.didTagRemoved).</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSetTagRemoveThreshold:(BOOL)isTemp Round:(int)round</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter><Parameter>
					<Name>round</Name>
					<Abstract type="html">The count of missing discovering tag threshold of inventory rounds.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSetTagRemoveThreshold:Round:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetTagRemoveThreshold:</TokenIdentifier>
			<Abstract type="html">Get the threshold to raise a TagRemovedEvent(UHFCallback.didTagRemoved).</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetTagRemoveThreshold:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetTagRemoveThreshold:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdSet:InventoryRoundInterval:</TokenIdentifier>
			<Abstract type="html">Set the InventoryRoundInterval
/// @param isTemp True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdSet:(BOOL)isTemp InventoryRoundInterval:(int)tenMilliSeconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>tenMilliSeconds</Name>
					<Abstract type="html">The period to start an inventory round. Range: 0~254*10s. 255 represent 0;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdSet:InventoryRoundInterval:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetInventoryRoundInterval:</TokenIdentifier>
			<Abstract type="html">Get the InventoryRoundInterval</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetInventoryRoundInterval:(BOOL)isTemp</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTemp</Name>
					<Abstract type="html">True value specifies the changes are temporary overwrides for settings. The changes are not saved into the EEPROM and take immediate effect (no rebooting required). False value specifies the changes are permanently overwrides for settings And also saved into the EEPROM. The changes will keep after rebooting the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdGetInventoryRoundInterval:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdGetFirmwareVersion</TokenIdentifier>
			<Abstract type="html">Get Device Information
Gets the firmware program version running on the device.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdGetFirmwareVersion</Declaration>
			
			
			<Anchor>//api/name/cmdGetFirmwareVersion</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdStartInventory:</TokenIdentifier>
			<Abstract type="html">Start Inventory mEPC Tag.
Starts the process of tag inventory using specified trigger source.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/IUHFDeviceListener</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/GNPTagInfo</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)cmdStartInventory:(TagPresentedType)tagPresentedType</Declaration>
			<Parameters>
				<Parameter>
					<Name>tagPresentedType</Name>
					<Abstract type="html">Specify the way of triggering the RF power to read tag data.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdStartInventory:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdStartInventoryEx:</TokenIdentifier>
			<Abstract type="html">* Start inventory tags with specific encoded data type.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdStartInventoryEx:(TagDataEncodeType)tagDataEncodeType</Declaration>
			<Parameters>
				<Parameter>
					<Name>tagDataEncodeType</Name>
					<Abstract type="html">ex:tagDataEncodeType = UDC | EANUPCEAS;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdStartInventoryEx:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdStopInventory</TokenIdentifier>
			<Abstract type="html">Stop Inventory mEPC Tag.
Stops the process of tag inventory.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdStopInventory</Declaration>
			
			
			<Anchor>//api/name/cmdStopInventory</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdWriteEPC:EPCData:</TokenIdentifier>
			<Abstract type="html">Write EPC</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdWriteEPC:(NSString *)hexAccessPassword EPCData:(NSData *)epcData</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">The password of the tag.</Abstract>
				</Parameter><Parameter>
					<Name>epcData</Name>
					<Abstract type="html">The epc data that is going to write into tag.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdWriteEPC:EPCData:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdWriteTag:MemoryBank:StartAddr:Data:</TokenIdentifier>
			<Abstract type="html">Write EPC</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdWriteTag:(NSString *)hexAccessPassword MemoryBank:(MemoryBank)memoryBank StartAddr:(int)startWordAddress Data:(NSData *)data</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">Specifies the password to write data.</Abstract>
				</Parameter><Parameter>
					<Name>memoryBank</Name>
					<Abstract type="html">Specifies which memory bank to write.</Abstract>
				</Parameter><Parameter>
					<Name>startWordAddress</Name>
					<Abstract type="html">Specifies the start word address of memory bank to write data.When write EPC bank, notice that EPC starts from address 02, the first two 2 words are for CRC and PC.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">Specifies the data to write to memory bank.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdWriteTag:MemoryBank:StartAddr:Data:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdWriteSelectTag:PWD:MemoryBank:StartAddr:Data:</TokenIdentifier>
			<Abstract type="html">Write EPC</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdWriteSelectTag:(NSString *)hexSelectedPcEpc PWD:(NSString *)hexAccessPassword MemoryBank:(MemoryBank)memoryBank StartAddr:(int)startWordAddress Data:(NSData *)data</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexSelectedPcEpc</Name>
					<Abstract type="html">Specifies the tag PC EPC to be selected.</Abstract>
				</Parameter><Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">Specifies the password to write data.</Abstract>
				</Parameter><Parameter>
					<Name>memoryBank</Name>
					<Abstract type="html">Specifies which memory bank to write.</Abstract>
				</Parameter><Parameter>
					<Name>startWordAddress</Name>
					<Abstract type="html">Specifies the start word address of memory bank to write data.When write EPC bank, notice that EPC starts from address 02, the first two 2 words are for CRC and PC.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">Specifies the data to write to memory bank.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdWriteSelectTag:PWD:MemoryBank:StartAddr:Data:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdReadEPC:</TokenIdentifier>
			<Abstract type="html">Read EPC
Reads tag data from given memory bank.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdReadEPC:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract type="html">Password of the tag that is going to read. (4 byte/2 Hex String)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdReadEPC:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdReadTag:PWD:MemoryBank:StartAddr:ReadLen:</TokenIdentifier>
			<Abstract type="html">Read Tag</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdReadTag:(NSString *)hexSelectedPcEpc PWD:(NSString *)hexAccessPassword MemoryBank:(MemoryBank)memoryBank StartAddr:(int)startWordAddress ReadLen:(int)readLength</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexSelectedPcEpc</Name>
					<Abstract type="html">Specifies the tag PC EPC to be selected.</Abstract>
				</Parameter><Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">Specifies the password to write data.</Abstract>
				</Parameter><Parameter>
					<Name>memoryBank</Name>
					<Abstract type="html">Specifies which memory bank to write.</Abstract>
				</Parameter><Parameter>
					<Name>startWordAddress</Name>
					<Abstract type="html">Specifies the start word address of memory bank to read data.When read EPC bank, notice that EPC starts from address 02, the first two 2 words are for CRC and PC.</Abstract>
				</Parameter><Parameter>
					<Name>readLength</Name>
					<Abstract type="html">Specifies the length to read from memory bank.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdReadTag:PWD:MemoryBank:StartAddr:ReadLen:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdReadTagWithPWD:MemoryBank:StartAddr:ReadLen:</TokenIdentifier>
			<Abstract type="html">Read Tag</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdReadTagWithPWD:(NSString *)hexAccessPassword MemoryBank:(MemoryBank)memoryBank StartAddr:(int)startWordAddress ReadLen:(int)readLength</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">Specifies the password to write data.</Abstract>
				</Parameter><Parameter>
					<Name>memoryBank</Name>
					<Abstract type="html">Specifies which memory bank to write.</Abstract>
				</Parameter><Parameter>
					<Name>startWordAddress</Name>
					<Abstract type="html">Specifies the start word address of memory bank to read data.When read EPC bank, notice that EPC starts from address 02, the first two 2 words are for CRC and PC.</Abstract>
				</Parameter><Parameter>
					<Name>readLength</Name>
					<Abstract type="html">Specifies the length to read from memory bank.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdReadTagWithPWD:MemoryBank:StartAddr:ReadLen:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdLockTag:LockInfos:</TokenIdentifier>
			<Abstract type="html">Use accessPassword to Lock the first tag that is inventoried.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdLockTag:(NSString *)accessPassword LockInfos:(NSMutableArray *)lockInfos</Declaration>
			<Parameters>
				<Parameter>
					<Name>accessPassword</Name>
					<Abstract type="html">Access Password</Abstract>
				</Parameter><Parameter>
					<Name>lockInfos</Name>
					<Abstract type="html">The Lock Action to specified memory bank. see GNPLockInfos.h</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdLockTag:LockInfos:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdLockTag:</TokenIdentifier>
			<Abstract type="html">Lock the first tag that is inventoried.
The Access password is decided by the remote connected device.</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdLockTag:(NSMutableArray *)lockInfos</Declaration>
			<Parameters>
				<Parameter>
					<Name>lockInfos</Name>
					<Abstract type="html">The Lock Action to specified memory bank. see GNPLockInfos.h</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdLockTag:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdKillTag:KillPWD:</TokenIdentifier>
			<Abstract type="html">Kill Tag</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdKillTag:(NSString *)hexAccessPassword KillPWD:(NSString *)hexKillPassword</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexAccessPassword</Name>
					<Abstract type="html">Access Password</Abstract>
				</Parameter><Parameter>
					<Name>hexKillPassword</Name>
					<Abstract type="html">Kill Password</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdKillTag:KillPWD:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UHFDevice/cmdKillTag:</TokenIdentifier>
			<Abstract type="html">Kill Tag</Abstract>
			<DeclaredIn>UHFDevice.h</DeclaredIn>
			
			<Declaration>- (void)cmdKillTag:(NSString *)hexKillPassword</Declaration>
			<Parameters>
				<Parameter>
					<Name>hexKillPassword</Name>
					<Abstract type="html">Kill Password</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cmdKillTag:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
        
        
	</File>
</Tokens>